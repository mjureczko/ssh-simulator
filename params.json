{"name":"SSH-Simulator","tagline":"Simulator of ssh service","body":"[![NetworkedAssets GmbH](http://www.networkedassets.com/wordpress/wp-content/uploads/2013/01/NA_weblogo.png)](http://www.networkedassets.com)\r\n\r\n# Introduction\r\n\r\nDoes your application communicate through SSH? Do you want to ensure that these features are working properly in a number of more or less sophisticated test scenarios? If the answer is yes, then the SSH-Simulator can be very handy for you. SSH-Simulator is a simple, JUnit compatible tool for launching virtual devices, that communicate in SSH and automatically verifies the communication correctness.\r\n\r\nThe SSH-Simulator can be used in two ways. It is possible to launch it as an SSH server. In such case the simulator is waiting for incoming connections and when a client appears verifies whether the communication corresponds with a user defined schema, i.e. the simulator must be told which requests should arrive and how should they be responded - when something is going differently an error is reported. It is also possible (which is probably more interesting) to launch the SSH-Simulator in a JUnit test. In such scenario the simulator is launched and shut down in the context of a single test, and hence it is possible to define different communication scenarios for each test and release all resources instantly after test execution.\r\nGetting started\r\n\r\nThe easiest way to add the SSH-Simulator to a project is to use Apache Maven. It is enough to add following entries to the pom.xml file:\r\n\r\n# Listing 1: SSH-simulator dependency\r\n\r\n<dependency>\r\n  <groupId>com.networkedassets</groupId>\r\n  <artifactId>ssh-simulator</artifactId>\r\n  <version>0.1</version>\r\n  <scope>test</scope>\r\n</dependency>\r\n\r\nThe SSH-Simulator tool is configured using XML files. The XML configuration file contains expected requests and the responses that will be generated by the simulator. The file can look as it is presented on Listing 2.\r\n\r\n# Listing 2: Configuration file\r\n\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n \r\n<test_case xmlns:tcs=\"test_case_schema.xsd\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\r\n    xmlns=\"http://www.networkedassets.com/test_case_schema\">\r\n \r\n    <login>login</login>\r\n    <password>password</password>\r\n    <device_type>CNR</device_type>\r\n \r\n    <request delay_in_ms=\"3000\">\r\n        <request_command>dhcp reload</request_command>\r\n        <response_message>\r\n100 Ok\r\n        </response_message>\r\n        <response_prompt>nrcmd>$</response_prompt>\r\n    </request>\r\n</test_case>\r\n\r\nThe configuration file contains a <test_case> entry that represents the sequence of requests and responses that should be executed during test. At the top of <test_case> node are credentials that the client should use to connect to the simulator followed by a <device_type>. A number of device types are supported i.e. ASR, CMTS, CNR, Router7600. This parameter affects the behavior only slightly, namely simulator works like the selected device with respect to control characters (e.g. carriage return, echoes, etc.) Subsequently comes a series of <request> nodes (on the presented Listing there is only one) that define the expected client requests and instructs the simulator how should they be responded. The <request> node can have a delay_in_ms parameter. This parameter tells the simulator how long should he wait before sending the response (helpful in simulating long lasting commands). The <request_command> defines the content of expected client request; <response_message> stands for the response that will be send back to the client by the simulator; and eventually the <response_prompt> instructs how the command line prompt should look like. The configuration file should be saved in (src/test/resources/)TestCasesXmls directory.\r\n\r\nWhen the XML configuration file is ready, it is enough to use it in a JUnit test case as it is presented on Listing 3.\r\n\r\n# Listing 3: Using SSH-Simulator in JUnit\r\n\r\npublic class MyTest extends SshSimulatorGenericTestCase {\r\n    @Test\r\n    public void sampleTest() {\r\n        initializeNewSshServer(xmlConfigFileName, \"192.168.10.180\", 22);\r\n        //do the tests here\r\n    }\r\n}\r\n\r\nAfter test execution the SSH communication is automatically verified with respect to the given XML configuration. When it does not match, an ordinary JUnit test failure is reported. Typically the simulator is started on localhost (second parameter of the initializeNewSshServer method). If there is a need to have the SSH service available on different address, then the different address (e.g. 192.168.10.180) must be given as the second parameter and must be available on the machine where the simulator is started, e.g. as an additional network interface.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}